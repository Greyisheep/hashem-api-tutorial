{
	"info": {
		"_postman_id": "taskflow-api-collection",
		"name": "TaskFlow API - .NET",
		"description": "Complete Postman collection for the TaskFlow API built with .NET 8, DDD, and security best practices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "taskflow-api"
	},
	"item": [
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check the health status of the API and its dependencies"
					},
					"response": []
				}
			],
			"description": "Health check and status endpoints"
		},
		{
			"name": "Authentication & Security",
			"item": [
				{
					"name": "Google OAuth Login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/google-login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"google-login"
							]
						},
						"description": "Initiate Google OAuth 2.0 login flow"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						},
						"description": "Get current authenticated user information"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout current user"
					},
					"response": []
				}
			],
			"description": "OAuth 2.0 authentication and user management endpoints"
		},
		{
			"name": "Security Testing",
			"item": [
				{
					"name": "Test Rate Limiting",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Test rate limiting by making multiple requests"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for rate limit headers",
									"const rateLimitLimit = pm.response.headers.get('X-RateLimit-Limit');",
									"const rateLimitRemaining = pm.response.headers.get('X-RateLimit-Remaining');",
									"const rateLimitReset = pm.response.headers.get('X-RateLimit-Reset');",
									"",
									"if (rateLimitLimit) {",
									"    console.log('Rate Limit:', rateLimitLimit);",
									"    console.log('Remaining:', rateLimitRemaining);",
									"    console.log('Reset:', rateLimitReset);",
									"}",
									"",
									"// Check for security headers",
									"const securityHeaders = [",
									"    'Strict-Transport-Security',",
									"    'X-Frame-Options',",
									"    'X-Content-Type-Options',",
									"    'X-XSS-Protection',",
									"    'Content-Security-Policy',",
									"    'Referrer-Policy'",
									"];",
									"",
									"securityHeaders.forEach(header => {",
									"    const value = pm.response.headers.get(header);",
									"    if (value) {",
									"        console.log(`${header}: ${value}`);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Test Security Headers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check security headers implementation"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test security headers",
									"const requiredHeaders = {",
									"    'X-Content-Type-Options': 'nosniff',",
									"    'X-Frame-Options': 'DENY',",
									"    'X-XSS-Protection': '1; mode=block',",
									"    'Referrer-Policy': 'strict-origin-when-cross-origin'",
									"};",
									"",
									"let allHeadersPresent = true;",
									"",
									"for (const [header, expectedValue] of Object.entries(requiredHeaders)) {",
									"    const actualValue = pm.response.headers.get(header);",
									"    if (actualValue !== expectedValue) {",
									"        console.log(`❌ ${header}: expected '${expectedValue}', got '${actualValue}'`);",
									"        allHeadersPresent = false;",
									"    } else {",
									"        console.log(`✅ ${header}: ${actualValue}`);",
									"    }",
									"}",
									"",
									"if (allHeadersPresent) {",
									"    console.log('✅ All required security headers are present');",
									"} else {",
									"    console.log('❌ Some security headers are missing or incorrect');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Test Authentication Required",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Test that protected endpoints require authentication"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Should return 401 Unauthorized",
									"pm.test('Should require authentication', function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			],
			"description": "Security testing endpoints for rate limiting, headers, and authentication"
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Get all tasks for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}"
							]
						},
						"description": "Get a specific task by ID"
					},
					"response": []
				},
				{
					"name": "Create Task",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"New Task\",\n  \"description\": \"Task description\",\n  \"projectId\": \"{{projectId}}\",\n  \"assignedUserId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Create a new task"
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Task\",\n  \"description\": \"Updated description\",\n  \"status\": \"InProgress\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}"
							]
						},
						"description": "Update an existing task"
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}"
							]
						},
						"description": "Delete a task"
					},
					"response": []
				}
			],
			"description": "Task management endpoints with proper authorization"
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"projects"
							]
						},
						"description": "Get all projects for the authenticated user"
					},
					"response": []
				},
				{
					"name": "Get Project by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"projects",
								"{{projectId}}"
							]
						},
						"description": "Get a specific project by ID"
					},
					"response": []
				},
				{
					"name": "Create Project",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New Project\",\n  \"description\": \"Project description\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"projects"
							]
						},
						"description": "Create a new project"
					},
					"response": []
				}
			],
			"description": "Project management endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:7001",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "projectId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		}
	]
} 