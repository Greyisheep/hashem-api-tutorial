{
	"info": {
		"_postman_id": "taskflow-api-collection",
		"name": "TaskFlow API - .NET",
		"description": "Complete Postman collection for the TaskFlow API built with .NET 8, DDD, and security best practices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "taskflow-api"
	},
	"item": [
		{
			"name": "Health & Status",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check the health status of the API and its dependencies"
					},
					"response": []
				},
				{
					"name": "API Root",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Get API root information"
					},
					"response": []
				}
			],
			"description": "Health check and status endpoints"
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin@taskflow.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and get JWT token"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.token) {",
									"        pm.environment.set('authToken', response.data.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh JWT token using refresh token"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout and invalidate current token"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for JWT token management"
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Retrieve all tasks in the system"
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}"
							]
						},
						"description": "Retrieve a specific task by its ID"
					},
					"response": []
				},
				{
					"name": "Create Task",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Implement user authentication\",\n  \"description\": \"Create a secure authentication system using JWT tokens\",\n  \"projectId\": \"project_001\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Create a new task with the specified details"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.id) {",
									"        pm.environment.set('taskId', response.data.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Implement user authentication - Updated\",\n  \"description\": \"Create a secure authentication system using JWT tokens with additional security features\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}"
							]
						},
						"description": "Update an existing task"
					},
					"response": []
				},
				{
					"name": "Assign Task",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"assigneeId\": \"user_001\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}/assign",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}",
								"assign"
							]
						},
						"description": "Assign a task to a specific user"
					},
					"response": []
				},
				{
					"name": "Update Task Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"in_progress\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}",
								"status"
							]
						},
						"description": "Update the status of a task"
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"{{taskId}}"
							]
						},
						"description": "Delete a task by its ID"
					},
					"response": []
				}
			],
			"description": "Task management endpoints with full CRUD operations"
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"projects"
							]
						},
						"description": "Retrieve all projects in the system"
					},
					"response": []
				},
				{
					"name": "Get Project by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/projects/{{projectId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"projects",
								"{{projectId}}"
							]
						},
						"description": "Retrieve a specific project by its ID"
					},
					"response": []
				},
				{
					"name": "Create Project",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"TaskFlow API Development\",\n  \"description\": \"Building a production-ready API with .NET 8 and DDD\",\n  \"ownerId\": \"user_001\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/projects",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"projects"
							]
						},
						"description": "Create a new project"
					},
					"response": []
				}
			],
			"description": "Project management endpoints"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Retrieve all users in the system"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Retrieve a specific user by their ID"
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"developer@taskflow.com\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"role\": \"Developer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Create a new user account"
					},
					"response": []
				}
			],
			"description": "User management endpoints"
		},
		{
			"name": "Error Examples",
			"item": [
				{
					"name": "Invalid Task ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/invalid-task-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks",
								"invalid-task-id"
							]
						},
						"description": "Example of a 404 error when task is not found"
					},
					"response": []
				},
				{
					"name": "Unauthorized Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Example of a 401 error when no authentication token is provided"
					},
					"response": []
				},
				{
					"name": "Invalid Request Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"\",\n  \"description\": \"This is a test with invalid data\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tasks"
							]
						},
						"description": "Example of a 400 error when request data is invalid"
					},
					"response": []
				}
			],
			"description": "Examples of various error responses from the API"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "",
			"type": "string"
		},
		{
			"key": "projectId",
			"value": "project_001",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "user_001",
			"type": "string"
		}
	]
} 