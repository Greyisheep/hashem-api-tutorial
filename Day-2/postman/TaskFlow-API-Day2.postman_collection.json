{
	"info": {
		"_postman_id": "taskflow-api-day2",
		"name": "TaskFlow API - Day 2 Testing",
		"description": "Postman collection for Day 2: Architecture walkthrough, database design, and authentication testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "taskflow-api-day2"
	},
	"item": [
		{
			"name": "üèóÔ∏è Architecture Validation",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						},
						"description": "Verify API is running and healthy"
					},
					"response": []
				},
				{
					"name": "API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/swagger",
							"host": ["{{baseUrl}}"],
							"path": ["swagger"]
						},
						"description": "View auto-generated API documentation"
					},
					"response": []
				},
				{
					"name": "API Root",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": ["{{baseUrl}}"],
							"path": [""]
						},
						"description": "Get API root information"
					},
					"response": []
				}
			],
			"description": "Validate the API architecture and basic functionality"
		},
		{
			"name": "üîê Authentication Testing",
			"item": [
				{
					"name": "Login - Get JWT Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin@taskflow.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "login"]
						},
						"description": "Authenticate and get JWT token for testing"
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.token) {",
									"        pm.environment.set('authToken', response.data.token);",
									"        console.log('JWT Token saved to environment');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/refresh",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "refresh"]
						},
						"description": "Refresh JWT token using refresh token"
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": ["{{baseUrl}}"],
							"path": ["api", "auth", "logout"]
						},
						"description": "Logout and invalidate token"
					},
					"response": []
				}
			],
			"description": "Test JWT authentication flow"
		},
		{
			"name": "üë• Users Management",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						},
						"description": "Get all users (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users", "{{userId}}"]
						},
						"description": "Get specific user by ID"
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"developer@taskflow.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Developer\",\n  \"password\": \"SecurePass123!\",\n  \"role\": \"developer\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						},
						"description": "Create a new user"
					},
					"response": []
				}
			],
			"description": "Test user management endpoints"
		},
		{
			"name": "üìã Tasks Management",
			"item": [
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Get all tasks (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks", "{{taskId}}"]
						},
						"description": "Get specific task by ID"
					},
					"response": []
				},
				{
					"name": "Create Task",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Implement OAuth 2.0\",\n  \"description\": \"Add OAuth 2.0 authentication to TaskFlow API\",\n  \"projectId\": \"{{projectId}}\",\n  \"assigneeId\": \"{{userId}}\",\n  \"priority\": \"high\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Create a new task"
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Implement OAuth 2.0 - Updated\",\n  \"description\": \"Add OAuth 2.0 authentication with enhanced security\",\n  \"status\": \"in_progress\",\n  \"priority\": \"urgent\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks", "{{taskId}}"]
						},
						"description": "Update an existing task"
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks/{{taskId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks", "{{taskId}}"]
						},
						"description": "Delete a task (admin only)"
					},
					"response": []
				}
			],
			"description": "Test task management endpoints with DDD validation"
		},
		{
			"name": "üìÅ Projects Management",
			"item": [
				{
					"name": "Get All Projects",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/projects",
							"host": ["{{baseUrl}}"],
							"path": ["api", "projects"]
						},
						"description": "Get all projects"
					},
					"response": []
				},
				{
					"name": "Get Project by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/projects/{{projectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "projects", "{{projectId}}"]
						},
						"description": "Get specific project by ID"
					},
					"response": []
				},
				{
					"name": "Create Project",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Day 2 API Workshop\",\n  \"description\": \"Project for testing Day 2 API implementation\",\n  \"status\": \"active\",\n  \"startDate\": \"2024-01-15T00:00:00Z\",\n  \"endDate\": \"2024-01-20T00:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/projects",
							"host": ["{{baseUrl}}"],
							"path": ["api", "projects"]
						},
						"description": "Create a new project"
					},
					"response": []
				}
			],
			"description": "Test project management endpoints"
		},
		{
			"name": "üîí Authorization Testing",
			"item": [
				{
					"name": "Test Admin Access",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						},
						"description": "Test admin access to users endpoint"
					},
					"response": []
				},
				{
					"name": "Test Unauthorized Access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Test access without authentication (should return 401)"
					},
					"response": []
				},
				{
					"name": "Test Invalid Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid-token-here"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Test with invalid JWT token (should return 401)"
					},
					"response": []
				}
			],
			"description": "Test authorization and security"
		},
		{
			"name": "üß™ Database Testing",
			"item": [
				{
					"name": "Test User Creation with Validation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid-email\",\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"password\": \"123\",\n  \"role\": \"invalid-role\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						},
						"description": "Test domain validation with invalid data"
					},
					"response": []
				},
				{
					"name": "Test Task Creation with Business Rules",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"\",\n  \"description\": \"\",\n  \"projectId\": \"invalid-project-id\",\n  \"priority\": \"invalid-priority\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Test business rule validation"
					},
					"response": []
				},
				{
					"name": "Test Relationship Integrity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Task\",\n  \"description\": \"Testing relationship integrity\",\n  \"projectId\": \"non-existent-project-id\",\n  \"assigneeId\": \"non-existent-user-id\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Test foreign key relationship validation"
					},
					"response": []
				}
			],
			"description": "Test database constraints and domain validation"
		},
		{
			"name": "üìä Performance Testing",
			"item": [
				{
					"name": "Bulk Task Creation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Performance Test Task {{$randomInt}}\",\n  \"description\": \"Task for performance testing\",\n  \"projectId\": \"{{projectId}}\",\n  \"priority\": \"medium\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tasks",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"]
						},
						"description": "Create multiple tasks to test performance"
					},
					"response": []
				},
				{
					"name": "Get Tasks with Pagination",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tasks?page=1&pageSize=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "tasks"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							]
						},
						"description": "Test pagination performance"
					},
					"response": []
				}
			],
			"description": "Test API performance and scalability"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "projectId",
			"value": "",
			"type": "string"
		},
		{
			"key": "taskId",
			"value": "",
			"type": "string"
		}
	]
} 